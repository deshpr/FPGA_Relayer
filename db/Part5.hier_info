|Part5
CLOCK_50[0] => CLOCK_50[0].IN2
LED[0] <= SignalDetector:signal_detector_autonomous_control.port2
LED[1] <= SignalDetector:signal_detector_cruise_control.port2
LED[2] <= RPI_Ack_AUTONOMOUS.DB_MAX_OUTPUT_PORT_TYPE
LED[3] <= RPI_Ack_CRUISE.DB_MAX_OUTPUT_PORT_TYPE
LED[4] <= LED.DB_MAX_OUTPUT_PORT_TYPE
LED[5] <= LED.DB_MAX_OUTPUT_PORT_TYPE
LED[6] <= <GND>
AUTONOMOUS[0] => AUTONOMOUS[0].IN1
CRUISE_CONTROL[0] => CRUISE_CONTROL[0].IN1
SD_Rudder => Rudder.IN1
SD_Elevator => ~NO_FANOUT~
SD_Aileron => Elevator.IN1
SD_Throttle => Throttle.IN1
SD_Throttle => Throttle.IN1
SD_Pan => Pan.IN1
SD_Tilt => ~NO_FANOUT~
Rx_Rudder => Rudder.IN1
Rx_Rudder => Pan.IN1
Rx_Elevator => ~NO_FANOUT~
Rx_Aileron => Elevator.IN1
Rx_Throttle => Throttle.IN1
Rudder <= Rudder.DB_MAX_OUTPUT_PORT_TYPE
Elevator <= Elevator.DB_MAX_OUTPUT_PORT_TYPE
Aileron <= Aileron.DB_MAX_OUTPUT_PORT_TYPE
Throttle <= Throttle.DB_MAX_OUTPUT_PORT_TYPE
Pan <= Pan.DB_MAX_OUTPUT_PORT_TYPE
Tilt <= Tilt.DB_MAX_OUTPUT_PORT_TYPE
RPI_Req_CRUISE <= SignalDetector:signal_detector_cruise_control.port2
RPI_Ack_CRUISE => LED.IN1
RPI_Ack_CRUISE => LED[3].DATAIN
RPI_Ack_CRUISE => CRUISE_CONTROL_MODE.DATAIN
RPI_Req_AUTONOMOUS <= SignalDetector:signal_detector_autonomous_control.port2
RPI_Ack_AUTONOMOUS => LED.IN1
RPI_Ack_AUTONOMOUS => LED[2].DATAIN
RPI_Ack_AUTONOMOUS => AUTONOMOUS_MODE.DATAIN
SELECT => SELECT.IN1
RPI_Rx <= UART_Switch:switch_Xbee_Gps.port2
RPI_Tx => RPI_Tx.IN1
Xbee_Rx <= UART_Switch:switch_Xbee_Gps.port4
Xbee_Tx => Xbee_Tx.IN1
GPS_Rx <= UART_Switch:switch_Xbee_Gps.port6
GPS_Tx => GPS_Tx.IN1


|Part5|SignalDetector:signal_detector_autonomous_control
CLOCK_50[0] => LED_OUTPUT[0]~reg0.CLK
CLOCK_50[0] => times_to_check[0].CLK
CLOCK_50[0] => times_to_check[1].CLK
CLOCK_50[0] => times_to_check[2].CLK
CLOCK_50[0] => times_to_check[3].CLK
CLOCK_50[0] => to_check.CLK
CLOCK_50[0] => start_count.CLK
CLOCK_50[0] => count[0].CLK
CLOCK_50[0] => count[1].CLK
CLOCK_50[0] => count[2].CLK
CLOCK_50[0] => count[3].CLK
CLOCK_50[0] => count[4].CLK
CLOCK_50[0] => count[5].CLK
CLOCK_50[0] => count[6].CLK
CLOCK_50[0] => count[7].CLK
CLOCK_50[0] => count[8].CLK
CLOCK_50[0] => count[9].CLK
CLOCK_50[0] => count[10].CLK
CLOCK_50[0] => count[11].CLK
CLOCK_50[0] => count[12].CLK
CLOCK_50[0] => count[13].CLK
CLOCK_50[0] => count[14].CLK
CLOCK_50[0] => count[15].CLK
CLOCK_50[0] => count[16].CLK
CLOCK_50[0] => count[17].CLK
CLOCK_50[0] => count[18].CLK
CLOCK_50[0] => count[19].CLK
CLOCK_50[0] => count[20].CLK
CLOCK_50[0] => count[21].CLK
CLOCK_50[0] => count[22].CLK
CLOCK_50[0] => count[23].CLK
CLOCK_50[0] => count[24].CLK
CLOCK_50[0] => count[25].CLK
CLOCK_50[0] => back_to_mode_zero.CLK
CLOCK_50[0] => begin_determining.CLK
CLOCK_50[0] => determine_count.CLK
AUX_INPUT[0] => always0.IN1
AUX_INPUT[0] => always0.IN1
AUX_INPUT[0] => to_check.DATAB
AUX_INPUT[0] => determine_count.OUTPUTSELECT
AUX_INPUT[0] => begin_determining.OUTPUTSELECT
AUX_INPUT[0] => back_to_mode_zero.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => start_count.OUTPUTSELECT
LED_OUTPUT[0] <= LED_OUTPUT[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Part5|SignalDetector:signal_detector_cruise_control
CLOCK_50[0] => LED_OUTPUT[0]~reg0.CLK
CLOCK_50[0] => times_to_check[0].CLK
CLOCK_50[0] => times_to_check[1].CLK
CLOCK_50[0] => times_to_check[2].CLK
CLOCK_50[0] => times_to_check[3].CLK
CLOCK_50[0] => to_check.CLK
CLOCK_50[0] => start_count.CLK
CLOCK_50[0] => count[0].CLK
CLOCK_50[0] => count[1].CLK
CLOCK_50[0] => count[2].CLK
CLOCK_50[0] => count[3].CLK
CLOCK_50[0] => count[4].CLK
CLOCK_50[0] => count[5].CLK
CLOCK_50[0] => count[6].CLK
CLOCK_50[0] => count[7].CLK
CLOCK_50[0] => count[8].CLK
CLOCK_50[0] => count[9].CLK
CLOCK_50[0] => count[10].CLK
CLOCK_50[0] => count[11].CLK
CLOCK_50[0] => count[12].CLK
CLOCK_50[0] => count[13].CLK
CLOCK_50[0] => count[14].CLK
CLOCK_50[0] => count[15].CLK
CLOCK_50[0] => count[16].CLK
CLOCK_50[0] => count[17].CLK
CLOCK_50[0] => count[18].CLK
CLOCK_50[0] => count[19].CLK
CLOCK_50[0] => count[20].CLK
CLOCK_50[0] => count[21].CLK
CLOCK_50[0] => count[22].CLK
CLOCK_50[0] => count[23].CLK
CLOCK_50[0] => count[24].CLK
CLOCK_50[0] => count[25].CLK
CLOCK_50[0] => back_to_mode_zero.CLK
CLOCK_50[0] => begin_determining.CLK
CLOCK_50[0] => determine_count.CLK
AUX_INPUT[0] => always0.IN1
AUX_INPUT[0] => always0.IN1
AUX_INPUT[0] => to_check.DATAB
AUX_INPUT[0] => determine_count.OUTPUTSELECT
AUX_INPUT[0] => begin_determining.OUTPUTSELECT
AUX_INPUT[0] => back_to_mode_zero.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => count.OUTPUTSELECT
AUX_INPUT[0] => start_count.OUTPUTSELECT
LED_OUTPUT[0] <= LED_OUTPUT[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Part5|UART_Switch:switch_Xbee_Gps
S[0] => RPI_Rx.IN0
S[0] => Xbee_Rx.IN0
S[0] => GPS_Rx.IN0
S[0] => RPI_Rx.IN0
RPI_Rx[0] <= RPI_Rx.DB_MAX_OUTPUT_PORT_TYPE
RPI_Tx[0] => Xbee_Rx.IN1
Xbee_Rx[0] <= Xbee_Rx.DB_MAX_OUTPUT_PORT_TYPE
Xbee_Tx[0] => RPI_Rx.IN1
GPS_Rx[0] <= GPS_Rx.DB_MAX_OUTPUT_PORT_TYPE
GPS_Tx[0] => RPI_Rx.IN1
GPS_Tx[0] => GPS_Rx.IN1


